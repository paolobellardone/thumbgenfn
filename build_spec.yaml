#
# MIT License
#
# Copyright (c) 2022-24 PaoloB
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

version: 0.1
component: build
timeoutInSeconds: 6000
shell: bash
runAs: root
failImmediatelyOnError: true

env:
  # these are local variables to the build config
  variables:
  #  key: "value"

  # the value of a vaultVariable is the secret-id (in OCI ID format) stored in the OCI Vault service
  # you can then access the value of that secret in your build_spec.yaml commands
  vaultVariables:
  #  EXAMPLE_SECRET: "YOUR-SECRET-OCID"

  # exportedVariables are made available to use as parameters in sucessor Build Pipeline stages
  # For this Build to run, the Build Pipeline needs to have a BUILDRUN_HASH parameter set
  exportedVariables:
    - BUILDRUN_HASH
    - BUILD_RESULT
    - FUNCTION_VERSION

steps:
  - type: Command
    name: "Setup the environment variables"
    timeoutInSeconds: 120
    command: |
      export BUILDRUN_HASH=`echo ${OCI_BUILD_RUN_ID} | rev | cut -c 1-7`
      echo "BUILDRUN_HASH: " $BUILDRUN_HASH
      export FUNCTION_VERSION=`echo ${functionVersion}`
      echo "FUNCTION_VERSION: " $FUNCTION_VERSION

  - type: Command
    name: "Build the function image"
    timeoutInSeconds: 6000
    command: |
      cd ${OCI_PRIMARY_SOURCE_DIR}
      fn build --verbose
      image=$(docker images | grep thumbgenfn | awk -F ' ' '{print $3}') ; docker tag $image thumbgenfn
      export BUILD_RESULT=SUCCESS
    onFailure:
      - type: Command
        command: |
          export BUILD_RESULT=FAILURE
          echo "Error during the build phase"
        timeoutInSeconds: 400

outputArtifacts:
  - name: function_image
    type: DOCKER_IMAGE
    location: thumbgenfn:latest
